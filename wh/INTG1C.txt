/*
	* Copyright (C) 2025 Жанибек Какимбаев
	*
	* Бұл бағдарлама GNU General Public License v3.0 (GPLv3) лицензиясы бойынша таратылады.
	* Лицензия мәтіні: https://www.gnu.org/licenses/gpl-3.0.html
	*/
// Инструменты
Функция ФайлСуществует(Знач ПутьКФайлу) Экспорт
 	Файл = Новый Файл(ПутьКФайлу);
 	Возврат Файл.Существует();
КонецФункции

function httpssend(wh, lk, Объект)
	//Попытка

		//wh = "localhost";
		//lk = "/ugs/sivital/sivital-danil/webhook.php?tp=1c";
		//Соединение=новый HTTPСоединение(wh, 80,,);
		Соединение = Новый HTTPСоединение(wh,443,,,,,Новый ЗащищенноеСоединениеOpenSSL);

		ТипЗначения = ТипЗнч(Объект);
		МД = Метаданные.НайтиПоТипу(ТипЗначения);

		obj = Строка(МД.ПолноеИмя());
		uv = УИН(Объект.Ссылка);
		epkv = "";
		//epkv = Объект.EPKV;  //external primary key value

		Заголовки = Новый Соответствие;

		Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");

		Запрос = Новый HTTPЗапрос(lk, Заголовки);
		Запрос.УстановитьТелоИзСтроки("obj="+obj+"&uv="+uv+"&epkv="+epkv);

		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		//ЧтениеJSON = Новый ЧтениеJSON;
		//ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());

		//Данные = ПрочитатьJSON(ЧтениеJSON, Ложь);
	//Исключение
	//КонецПопытки

	return Ответ.ПолучитьТелоКакСтроку()
endfunction

function base64_decode(Encoded, Кодировка)

    ДвДанные = Base64Значение(Encoded);
    Если ДвДанные = Неопределено Тогда
        //Сообщить("Ошибка формата Base64");
        Возврат "";
    КонецЕсли;
    ВременныйФайл = ПолучитьИмяВременногоФайла();
    ДвДанные.Записать(ВременныйФайл);

    КодировкаФайла = Кодировка;

    Если Кодировка = "ANSI" Тогда
        КодировкаФайла = КодировкаТекста.ANSI;

    ИначеЕсли Кодировка = "OEM" Тогда
        КодировкаФайла = КодировкаТекста.OEM;

    ИначеЕсли Кодировка = "UTF8" Тогда
        КодировкаФайла = КодировкаТекста.UTF8;

    ИначеЕсли Кодировка = "UTF16" Тогда
        КодировкаФайла = КодировкаТекста.UTF16;

    ИначеЕсли Кодировка = "Системная" Тогда
        КодировкаФайла = КодировкаТекста.Системная;

    КонецЕсли;
    Чтение = Новый ЧтениеТекста(ВременныйФайл, КодировкаФайла);
    Decoded = Чтение.Прочитать();
    Чтение.Закрыть();
    УдалитьФайлы(ВременныйФайл);
    return Decoded;
endfunction

function base64_encode(Decoded, Кодировка)

    КодировкаФайла = Кодировка;

    Если Кодировка = "ANSI" Тогда
        КодировкаФайла = КодировкаТекста.ANSI;

    ИначеЕсли Кодировка = "OEM" Тогда
        КодировкаФайла = КодировкаТекста.OEM;

    ИначеЕсли Кодировка = "UTF8" Тогда
        КодировкаФайла = КодировкаТекста.UTF8;

    ИначеЕсли Кодировка = "UTF16" Тогда
        КодировкаФайла = КодировкаТекста.UTF16;

    ИначеЕсли Кодировка = "Системная" Тогда
        КодировкаФайла = КодировкаТекста.Системная;

    КонецЕсли;
    ВременныйФайл = ПолучитьИмяВременногоФайла();

    Запись = Новый ЗаписьТекста(ВременныйФайл, КодировкаФайла);
    Запись.Записать(Decoded);
    Запись.Закрыть();

    ДвДанные = Новый ДвоичныеДанные(ВременныйФайл);
    Encoded = Base64Строка(ДвДанные);

    УдалитьФайлы(ВременныйФайл);
    return Encoded;
endfunction

Функция explode(Разделитель, Стр) Экспорт
	тз = new ТаблицаЗначений;
	тз.Колонки.Добавить("v");
  //Если Позиция < 1 Тогда Возврат Стр; КонецЕсли;
     Поз = 0; Значение = "";
     //Если СтрЧислоВхождений(Стр, Разделитель) = 0 Тогда
     //     Возврат тз;
     //ИначеЕсли СтрЧислоВхождений(Стр, Разделитель) + 1 < Позиция Тогда
     //     Возврат тз;
     //КонецЕсли;
	 П = 0;
	 СтрДл = СтрДлина(Стр);
     Для ы = 1 По СтрДл Цикл
          Значение = Значение + Сред(Стр, ы, 1);
          Если Сред(Стр, ы, 1) = Разделитель Тогда
               Поз = Поз + 1;
			   rw = тз.Добавить();
			   rw.v = Лев(Значение, СтрДлина(Значение)-1);

			   Значение = "";
			   П = ы;
               //Если Поз = Число(Позиция) Тогда
               //     Возврат Лев(Значение, СтрДлина(Значение)-1);
               //Иначе Значение = "";
               //КонецЕсли;
         КонецЕсли;
	КонецЦикла;

	Если П<СтрДл Тогда
		rw = тз.Добавить();
		rw.v = Сред(Стр, П+1, СтрДл-П);
		//Сообщить(rw.v);
	КонецЕсли;


    Возврат тз;
КонецФункции

Функция УИН(Параметр) Экспорт // Функция с параметрами
    ЗН = "";
	//Если Не Параметр.Пустая() Тогда
	//  ЗН=Параметр.УникальныйИдентификатор();
	//КонецЕсли;
	попытка
		ЗН=Параметр.УникальныйИдентификатор();
	исключение
		ЗН = "";
	конецпопытки;
    Возврат Строка(ЗН);
КонецФункции

Функция УИНВU(Параметр) Экспорт // Функция с параметрами
	Перем GUID;
	GUID = Неопределено;
	попытка
		GUID = Новый УникальныйИдентификатор(Параметр);
	исключение
		GUID = Неопределено;
	конецпопытки;
    Возврат GUID;
КонецФункции


//На все необходимые Объекты в Модуле объекта надо вставить вначале Код
//procedure ПриЗаписи(Отказ)
//	INTG.ПриЗаписиОбъекта(ЭтотОбъект);
//endprocedure
//Является Общим Триггером ЗАПИСИ Сущностей с URL отправкой данных на WebHook
procedure ПриЗаписиОбъекта(Объект) Экспорт

	//ИмяФайла = "C:\d1c.json";
	//ВыбФайл = Новый Файл(ИмяФайла);
	//Если ВыбФайл.Существует() Тогда
	//    Текст = Новый ЧтениеТекста(ИмяФайла);
	//	txt = "";
	//    Строка = Текст.ПрочитатьСтроку();
	//    Пока Строка <> Неопределено Цикл //строки читаются до символа       перевода строки
	//        //Сообщить(Строка);
	//        Строка = Текст.ПрочитатьСтроку();
	//        txt = txt +  Строка;
	//	КонецЦикла;
	//
	//	ЧтениеJSON = Новый ЧтениеJSON();
	//	ЧтениеJSON.УстановитьСтроку(txt);
	//	Структура = ПрочитатьJSON(ЧтениеJSON);
	//	ЧтениеJSON.Закрыть();
	//
	//	if Структура.Свойство("host") and Структура.Свойство("link") then
	//		r = httpssend(Структура.host, Структура.link, Объект);
	//		Message(r);
	//	endif;
	//
	//КонецЕсли;

	r = httpssend("tirlik.kz", "/ugs/sivital/WebHook.php?tp=1c", Объект);
	// r = httpssend("da18-151-236-192-54.ngrok.io", "/sivital/webhook.php?tp=1c", Объект);

endprocedure


//Методы работы с данными Сущностей Объектов
Функция list(ent, cmd, fs, rs, rsmv, sql, uv)
	rss = Новый Структура;
	if Строка(uv)="" then
		sfs = "";
		i = 0;
		Для Каждого f Из fs Цикл
			if Число(f.value.SL)=1 then
				i = i+1;
				if i>1 then
					sfs = sfs + ",";
				endif;
				sfs = sfs + f.value.NM;
	        endif;
		КонецЦикла;
		Запрос = Новый Запрос;
		Запрос.Текст = base64_decode(sql, "UTF8");
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДокументов = РезультатЗапроса.Выбрать();

		Пока ВыборкаДокументов.Следующий() Цикл
			rw = Новый Структура;
			rwd = Новый Структура;

			Для Каждого f Из fs Цикл
				if Число(f.value.SL)=1 then
					fn = Строка(f.value.NM);
					lstf = explode(".",f.value.TP);
                    f1 = lstf[0].v;
					if f.value.TP="uv" or f1="Справочник" or f1="Документ" then // or
						v = УИН(ВыборкаДокументов[fn]);
					elsif f1="Перечисление" then
						vv = ВыборкаДокументов[fn];
						vs = Строка(vv);
						if vs<>"" then
							v = Строка(ТипЗнч(vv))+"."+vs;
						endif;

					else
						v = Строка(ВыборкаДокументов[fn]);

					endif;
					rwd.Вставить(fn, v);
	            endif;
			КонецЦикла;

			rw.Вставить("d", rwd);
			rsmv = rsmv+1;
			rss.Вставить("rw"+Строка(Формат(rsmv, "ЧГ=")), rw);
		КонецЦикла;
	else
		lst = explode(".",ent);
		etp = lst[0].v;
		enm = lst[1].v;
		onm = "";
		if etp="Документ" then
			onm = "Документы."+enm;
			d = Метаданные.Документы[enm];

		elsif etp="Справочник" then
			onm = "Справочники."+enm;
			d = Метаданные.Справочники[enm];
		endif;
		ul = Неопределено;

		Execute("ul = "+onm+".ПолучитьСсылку(УИНВU(uv));");
		Если НЕ ul = Неопределено Тогда
		    Объект = ul.ПолучитьОбъект();
            rw = Новый Структура;
			rwd = Новый Структура;
			rwit = Новый Структура;
			Для Каждого f Из fs Цикл
				if Число(f.value.SL)=1 and Строка(f.value.TP)<>"uv" then
					fn = Строка(f.value.NM);
					lstf = explode(".",f.value.TP);
                    f1 = lstf[0].v;
					vv = Объект[fn];
					if f1="Справочник" or f1="Документ" then // or
						v = УИН(vv);
					elsif f1="Перечисление" then
						vs = Строка(vv);
						if vs<>"" then
							v = Строка(ТипЗнч(vv))+"."+vs;
						endif;
					else
						v = Строка(vv);
					endif;
					rwd.Вставить(fn, v);
	            endif;
			КонецЦикла;
            rw.Вставить("d", rwd);

			i = 0;
			Для каждого p Из d.ТабличныеЧасти Цикл
				i = i+1;
				rwitd = Новый Структура;
				rwitrs = Новый Структура;
				itnm = ent+"."+p.Имя;
				itfs = fields(itnm, 1);
				itrk = 0;
				Для каждого itrw из Объект[p.Имя] Цикл
					rwit1 = Новый Структура;
					rwit2 = Новый Структура;

					Для Каждого itf Из itfs Цикл
						itfn = Строка(itf.value.NM);
						rwit2.Вставить(itfn, itrw[itfn]);
					КонецЦикла;
					rwit1.Вставить("d", rwit2);

					itrk = itrk+1;
					rwitrs.Вставить("rw"+Строка(Формат(itrk, "ЧГ=")), rwit1);

				КонецЦикла;
				rwitd.Вставить("fs", itfs);
				rwitd.Вставить("rs", rwitrs);
				rwitd.Вставить("nm", p.Имя);
				rwit.Вставить("it"+Строка(i), rwitd);
			КонецЦикла;

			rw.Вставить("it", rwit);
			rss.Вставить("rw1", rw);
		КонецЕсли;
	endif; //uv
	Возврат rss;
КонецФункции

function fields(ent, dn)
	fs = Новый Структура;
	lst = explode(".",ent);
	etp = lst[0].v;
	enm = lst[1].v;
	i = 0;
	if dn=0 then
		if etp="Документ" then
			RQ = Метаданные.Документы[enm].Реквизиты;
			f = Новый Структура;
			f.Вставить("NM", "Ссылка");
			f.Вставить("TP", "key");
			f.Вставить("SL", "1");
            f.Вставить("CMP", "");
			i = i + 1;
			fs.Вставить("f"+Строка(i), f);

			f = Новый Структура;
			f.Вставить("NM", "Дата");
			f.Вставить("TP", "Дата");
			f.Вставить("SL", "1");
            f.Вставить("CMP", "");
			i = i + 1;
			fs.Вставить("f"+Строка(i), f);

			f = Новый Структура;
			f.Вставить("NM", "Номер");
			f.Вставить("TP", "Строка");
			f.Вставить("SL", "1");
            f.Вставить("CMP", "");
			i = i + 1;
			fs.Вставить("f"+Строка(i), f);
		elsif etp="Справочник" then
			RQ = Метаданные.Справочники[enm].Реквизиты;
			f = Новый Структура;
			f.Вставить("NM", "Ссылка");
			f.Вставить("TP", "key");
			f.Вставить("SL", "1");
            f.Вставить("CMP", "");
			i = i + 1;
			fs.Вставить("f"+Строка(i), f);

			f = Новый Структура;
			f.Вставить("NM", "Код");
			f.Вставить("TP", "varchar");
			f.Вставить("SL", "1");
            f.Вставить("CMP", "");

			i = i + 1;
            fs.Вставить("f"+Строка(i), f);

            f = Новый Структура;
			f.Вставить("NM", "Наименование");
			f.Вставить("TP", "varchar");
			f.Вставить("SL", "1");
            f.Вставить("CMP", "");
			i = i + 1;
            fs.Вставить("f"+Строка(i), f);
		endif;


	elsif dn=1 then
		tp = lst[2].v;
		if etp="Документ" then
			d = Метаданные.Документы[enm];
		elsif etp="Справочник" then
			d = Метаданные.Справочники[enm];
		endif;
		RQ = d.ТабличныеЧасти[tp].Реквизиты;

		f = Новый Структура;
		f.Вставить("NM", "НомерСтроки");
		f.Вставить("TP", "Число");
		f.Вставить("SL", "1");
        f.Вставить("CMP", "");
		i = i + 1;
        fs.Вставить("f"+Строка(i), f);
	endif;

	Для каждого ТекущийРеквизит Из RQ Цикл
    	f = Новый Структура;
		f.Вставить("NM", ТекущийРеквизит.Имя);
		Тип = ТекущийРеквизит.Тип.Типы()[0];
		МД = Метаданные.НайтиПоТипу(Тип);
		TP = "";
		SL = "1";
		Если МД = Неопределено Тогда
			TP = Строка(ТекущийРеквизит.Тип);
			if TP="Строка" then
				Длина = ТекущийРеквизит.Тип.КвалификаторыСтроки.Длина;
				TP = TP+"("+Длина+")";
			elsif TP="Число" then
				Р = ТекущийРеквизит.Тип.КвалификаторыЧисла.Разрядность;
	        	Д = ТекущийРеквизит.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
				TP = TP+"("+Р+","+Д+")";
			endif;
		Иначе
			TP = Строка(МД.ПолноеИмя());
			//SL = "0";
		КонецЕсли;

		f.Вставить("TP", Строка(TP));
		f.Вставить("SL", SL);
        f.Вставить("CMP", "");
		i = i + 1;
        fs.Вставить("f"+Строка(Формат(i, "ЧГ=")), f);
	КонецЦикла;
	return fs;
endfunction

function get_obj(onm, v)
	ul = Неопределено;
	obj = Неопределено;
	Execute("ul = "+onm+".ПолучитьСсылку(УИНВU(uv));");
	Если НЕ ul = Неопределено Тогда
	    obj = ul.ПолучитьОбъект();
	КонецЕсли;
	return obj;
endfunction

function set_obj(Объект, fs, rs)
	//Для Каждого f Из fs Цикл
	//	fn = Строка(f.value.NM);
	//	if Число(f.value.SL)=1 and Строка(f.value.TP)<>"uv" and rs.rw1.d.Свойство(fn) then
	//		if Строка(f.value.TP)="Дата" then
	//			Объект[fn] = Дата(rs.rw1.d[fn]);
	//		else
	//			Объект[fn] = rs.rw1.d[fn];
	//		endif;
	//
	//    endif;
	//КонецЦикла;

	Для Каждого f Из fs Цикл
		fn = Строка(f.value.NM);
		if Число(f.value.SL)=1 and Строка(f.value.TP)<>"key" and rs.rw1.d.Свойство(fn) then
			lsttp = explode(".",f.value.TP);
			tpnm = Строка(lsttp[0].v);
			v = Строка(rs.rw1.d[fn]);

			if v<>"" then
				if tpnm="Перечисление" then
					//Перечисления.Перечисление1.ЗначениеПеречисления1
					Execute("Объект[fn] = Перечисления."+lsttp[1].v+"."+v);
				elsif tpnm="Документ" then
					otpnm = "Документы."+lsttp[1].v;
					Execute("Объект[fn] = get_obj(otpnm, v)");
				elsif tpnm="Справочник" then
					otpnm = "Справочники."+lsttp[1].v;
					Execute("Объект[fn] = get_obj(otpnm, v)");
				else
					if tpnm="Дата" then
						Объект[fn] = Дата(v);
					else
						Объект[fn] = v;
					endif;
				endif;
			endif;


        endif;
	КонецЦикла;

endfunction

function save_obj(etp, Объект, dn)
	if etp="Документ" then
		if dn=1 then
			Объект.Записать(РежимЗаписиДокумента.Запись);
			Объект.Записать(РежимЗаписиДокумента.Проведение);
		else
			Объект.Записать(РежимЗаписиДокумента.Запись);
		endif;
	elsif etp="Справочник" then
		Объект.Записать();
	endif;

endfunction

function upd(ent, uv, fs, rs, dn)

	lst = explode(".",ent);
	etp = lst[0].v;
	enm = lst[1].v;
	onm = "";
	if etp="Документ" then
		onm = "Документы."+enm;
	elsif etp="Справочник" then
		onm = "Справочники."+enm;
	endif;

	Объект = get_obj(onm, uv);
	Если НЕ Объект = Неопределено Тогда
		set_obj(Объект, fs, rs);
		save_obj(etp, Объект, dn);
	КонецЕсли;

	return dn;
endfunction

function add(ent, fs, rs, dn)
	var uv;
	lst = explode(".",ent);
	etp = lst[0].v;
	enm = lst[1].v;
	onm = "";
	Объект = Неопределено;
	if etp="Документ" then
		onm = "Документы."+enm;
		Execute("Объект = "+onm+".СоздатьДокумент();");
	elsif etp="Справочник" then
		onm = "Справочники."+enm;
		Execute("Объект = "+onm+".СоздатьЭлемент();");
	endif;
    ///Объект = Справочники.ФизическиеЛица.СоздатьЭлемент();
	Если НЕ Объект = Неопределено Тогда
		set_obj(Объект, fs, rs);
        save_obj(etp, Объект, dn);
		uv = УИН(Объект.Ссылка);
	КонецЕсли;
	return uv;
endfunction

function del(ent, uv)
	var dn;

	dn = 0;
	lst = explode(".",ent);
	etp = lst[0].v;
	enm = lst[1].v;
	onm = "";
	if etp="Документ" then
		onm = "Документы."+enm;
	elsif etp="Справочник" then
		onm = "Справочники."+enm;
	endif;
    ul = Неопределено;
	Execute("ul = "+onm+".ПолучитьСсылку(УИНВU(uv));");
	ul = Справочники.ФизическиеЛица.ПолучитьСсылку(УИНВU(uv));
	Если НЕ ul = Неопределено Тогда
		Объект = ul.ПолучитьОбъект();
        //Объект.ПометкаУдаления = True;
		Объект.УстановитьПометкуУдаления(Истина, Истина);
		//Объект.Удалить();
		if etp="Документ" then
			Объект.Записать(РежимЗаписиДокумента.Запись);
		elsif etp="Справочник" then
			Объект.Записать();

		endif;

		dn = 1;
	КонецЕсли;
	return dn;
endfunction

function ent_list()
	var rs;
	rsmv = 0;
    rs = Новый Структура;
	Для Каждого Справочник Из Метаданные.Справочники Цикл
		rw = Новый Структура;
		rwd = Новый Структура;

		nm = "Справочник."+Справочник.Имя;
		rwd.Вставить("OBJ", nm);
		rwd.Вставить("OBJSYN", Справочник.Синоним);
        rw.Вставить("d", rwd);

		cnt = 0;
		Попытка
		    Запрос = Новый Запрос;
			Запрос.Текст = "select count(*) as cnt from "+nm;
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			cnt = Выборка["cnt"];
		Исключение
		    cnt = 0;
		КонецПопытки;
		rw.Вставить("cnt", cnt);
		rsmv = rsmv+1;
		rs.Вставить("rw"+Строка(Формат(rsmv, "ЧГ=")), rw);
	КонецЦикла;

	Для Каждого Документ Из Метаданные.Документы Цикл
		rw = Новый Структура;
		rwd = Новый Структура;

		nm = "Документ."+Документ.Имя;
		rwd.Вставить("OBJ", nm);
		rwd.Вставить("OBJSYN", Документ.Синоним);
        rw.Вставить("d", rwd);

		cnt = 0;
		Попытка
		    Запрос = Новый Запрос;
			Запрос.Текст = "select count(*) as cnt from "+nm;
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			cnt = Выборка["cnt"];
		Исключение
		    cnt = 0;
		КонецПопытки;
		rw.Вставить("cnt", cnt);
		rsmv = rsmv+1;
		rs.Вставить("rw"+Строка(Формат(rsmv, "ЧГ=")), rw);
	КонецЦикла;

	Для Каждого Перечисление Из Метаданные.Перечисления Цикл
		rw = Новый Структура;
		rwd = Новый Структура;

		nm = "Перечисление."+Перечисление.Имя;
		//Message(nm);
		rwd.Вставить("OBJ", nm);
		rwd.Вставить("OBJSYN", Перечисление.Синоним);

		cnt = 0;
		v = "";
		Для Каждого З Из Перечисление.ЗначенияПеречисления Цикл
			cnt = cnt + 1;
			if v<>"" then
				v = v + "|";
			endif;

			v = v + З.Имя;
		КонецЦикла;
		rwd.Вставить("OBJV", v);
        rw.Вставить("d", rwd);
		rw.Вставить("cnt", cnt);
		rsmv = rsmv+1;
		rs.Вставить("rw"+Строка(Формат(rsmv, "ЧГ=")), rw);
	КонецЦикла;

	return rs;
endfunction

function it(ent)
	it = Новый Структура;
	lst = explode(".",ent);
	etp = lst[0].v;
	enm = lst[1].v;
	if etp="Документ" then
		d = Метаданные.Документы[enm];
	elsif etp="Справочник" then
		d = Метаданные.Справочники[enm];
	endif;
	i = 0;
	Для каждого p Из d.ТабличныеЧасти Цикл
		i = i+1;
		itnm = ent+"."+p.Имя;
		rw = Новый Структура;
		rw.Вставить("nm", itnm);
		rw.Вставить("fs", fields(itnm, 1));
		it.Вставить("it"+Строка(i), rw);
	КонецЦикла;

	return it;
endfunction




//Обработка Web сервиса WSJ.IO
//function IO(jsontxt)
//	return INTG.IO(jsontxt);
//endfunction
Функция IO(jsontxt) export
	Ответ = "";
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(jsontxt);
	Структура = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	//-----------------------------------

	//Для Каждого Элемент Из Структура Цикл
        //Сообщить(Строка(Элемент.Ключ) + " " + Строка(Элемент.Значение));
		//Если Строка(Элемент.Ключ)="ent" Тогда
			//lst = explode(".",Структура.ent);
			//etp = lst[0].v;
			//Если Строка(Элемент.Значение)="crm.contact.list" Тогда
				//Ответ = Строка(Ответ) + Строка(Элемент.Ключ);
			//if etp="Документ" then
							//endif;
			if Структура.cmd="list" then
				Структура.rs = list(Структура.ent, Структура.cmd, Структура.fs, Структура.rs, Структура.rsmv, Структура.sql, Структура.uv);
			elsif Структура.cmd="fields" then
				Структура.fs = fields(Структура.ent, Структура.dn);
			elsif Структура.cmd="upd" then
				Структура.dn = upd(Структура.ent, Структура.uv, Структура.fs, Структура.rs, Структура.dn);
			elsif Структура.cmd="add" then
				Структура.uv = add(Структура.ent, Структура.fs, Структура.rs, Структура.dn);
			elsif Структура.cmd="del" then
				Структура.uv = del(Структура.ent, Структура.uv);
			elsif Структура.cmd="ent_list" then
				Структура.rs = ent_list();
			elsif Структура.cmd="it" then
				Структура.it = it(Структура.ent);
			endif;
				//КонецЕсли;

		//КонецЕсли;



    //КонецЦикла;

	//-----------------------------------
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Структура);
	jsontxt = ЗаписьJSON.Закрыть();
	Ответ = jsontxt;
	Возврат Ответ;
КонецФункции
